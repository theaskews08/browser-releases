name: Release Browser (Working Version)

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: "Source repository (owner/repo)"
        required: true
        default: "electron/electron"
      target_tag_prefix:
        description: "Prefix for release tag (optional)"
        required: false
        default: "browser-"

jobs:
  mirror_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      SOURCE_REPO: ${{ inputs.source_repo }}
      TAG_PREFIX: ${{ inputs.target_tag_prefix }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Source Repository Access
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "🔍 Testing access to: $SOURCE_REPO"
          
          # Test if we can access the repo
          if gh repo view "$SOURCE_REPO" --json name,visibility,owner >/dev/null 2>&1; then
            echo "✅ Successfully verified access to $SOURCE_REPO"
            gh repo view "$SOURCE_REPO" --json name,visibility,owner
          else
            echo "❌ Cannot access '$SOURCE_REPO'"
            echo ""
            echo "🔍 Let's try some alternatives based on your search..."
            
            # Try some alternatives that showed up in your search
            alternatives=("lightbend/browser" "teslasoft/browser" "browserstack/browserstack" "electron/electron")
            
            echo "Testing these alternatives:"
            for alt in "${alternatives[@]}"; do
              if gh repo view "$alt" --json name,visibility >/dev/null 2>&1; then
                echo "✅ $alt - ACCESSIBLE"
              else
                echo "❌ $alt - not accessible"
              fi
            done
            
            echo ""
            echo "💡 Suggestions:"
            echo "1. Use 'electron/electron' as a test (it has regular releases)"
            echo "2. Check if the repository you want is private and you need access"
            echo "3. Verify the exact repository name in GitHub"
            exit 1
          fi

      - name: List Available Releases
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "📋 Recent releases in $SOURCE_REPO:"
          gh release list --repo "$SOURCE_REPO" --limit 5

      - name: Get Latest Release Information
        id: latest_release
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "🔍 Fetching latest release from $SOURCE_REPO..."
          
          LATEST_RELEASE=$(gh release list --repo "$SOURCE_REPO" --limit 1 --json tagName --jq '.[0].tagName')
          
          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
            echo "❌ No releases found in $SOURCE_REPO"
            exit 1
          fi
          
          # Apply prefix if specified
          if [ -n "$TAG_PREFIX" ]; then
            TARGET_TAG="${TAG_PREFIX}${LATEST_RELEASE}"
          else
            TARGET_TAG="$LATEST_RELEASE"
          fi
          
          echo "✅ Latest release: $LATEST_RELEASE"
          echo "🏷️ Target tag: $TARGET_TAG"
          
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> "$GITHUB_ENV"
          echo "TARGET_TAG=$TARGET_TAG" >> "$GITHUB_ENV"

      - name: Download Release Assets
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          echo "⬇️ Downloading assets from release $LATEST_RELEASE..."
          
          # Create downloads directory
          mkdir -p downloads
          cd downloads
          
          # Download all assets
          if gh release download --repo "$SOURCE_REPO" "$LATEST_RELEASE" --dir . 2>/dev/null; then
            echo "✅ Download successful"
          else
            echo "⚠️ Download failed or no assets available"
            echo "Creating a placeholder file for testing..."
            echo "Release $LATEST_RELEASE from $SOURCE_REPO" > "release-info.txt"
            echo "Downloaded on: $(date)" >> "release-info.txt"
          fi
          
          echo "📁 Files in downloads directory:"
          ls -la
          
          # Move files to root (handle case where no files exist)
          cd ..
          if [ "$(ls -A downloads/ 2>/dev/null)" ]; then
            mv downloads/* . 2>/dev/null || true
          else
            echo "No files to move - creating placeholder"
            echo "Release mirror for $SOURCE_REPO $LATEST_RELEASE" > "release-notes.txt"
          fi

      - name: Prepare Release Assets
        id: prepare_assets
        run: |
          echo "📦 Preparing assets for upload..."
          
          # Find all files (excluding directories and git files)
          assets=$(find . -maxdepth 1 -type f ! -name ".*" ! -name "release-notes.txt" 2>/dev/null || true)
          
          if [ -z "$assets" ]; then
            echo "📝 No binary assets found, creating release info file..."
            echo "# Release Mirror: $TARGET_TAG

This release mirrors **$SOURCE_REPO** release **$LATEST_RELEASE**.

**Original Release:** https://github.com/$SOURCE_REPO/releases/tag/$LATEST_RELEASE  
**Mirrored on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  

To download the original assets, visit the source release above." > "release-info.md"
            assets="release-info.md"
          fi
          
          echo "✅ Assets ready for upload:"
          for asset in $assets; do
            if [ -f "$asset" ]; then
              size=$(ls -lh "$asset" | awk '{print $5}')
              echo "  📄 $asset ($size)"
            fi
          done
          
          echo "$assets" > asset_list.txt

      - name: Check for Existing Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Checking if release $TARGET_TAG already exists..."
          
          if gh release view "$TARGET_TAG" >/dev/null 2>&1; then
            echo "⚠️ Release $TARGET_TAG exists. Deleting to recreate..."
            gh release delete "$TARGET_TAG" --yes || true
            git tag -d "$TARGET_TAG" 2>/dev/null || true
            git push origin --delete "$TARGET_TAG" 2>/dev/null || true
          else
            echo "✅ No existing release found."
          fi

      - name: Create Draft Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Creating draft release $TARGET_TAG..."
          
          assets=$(cat asset_list.txt)
          
          # Create release notes
          echo "# Browser Release $TARGET_TAG

This release mirrors the latest assets from **$SOURCE_REPO**.

**Source Release:** $LATEST_RELEASE  
**Source Repository:** https://github.com/$SOURCE_REPO  
**Mirrored on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

## Assets

$(for asset in $assets; do echo "- $asset"; done)

---
*This is an automated mirror of the source repository's latest release.*" > release_notes.md
          
          # Create the release
          gh release create "$TARGET_TAG" $assets \
            --title "Browser Release $TARGET_TAG" \
            --notes-file release_notes.md \
            --draft
          
          echo "✅ Draft release created successfully!"
          echo "🔗 View at: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$TARGET_TAG"

      - name: Success Summary
        run: |
          echo "🎉 Workflow completed successfully!"
          echo ""
          echo "📋 Summary:"
          echo "  Source: $SOURCE_REPO (release $LATEST_RELEASE)"
          echo "  Target: ${{ github.repository }} (release $TARGET_TAG)"
          echo "  Status: Draft created ✅"
          echo ""
          echo "🔗 Next steps:"
          echo "1. Go to: ${{ github.server_url }}/${{ github.repository }}/releases"
          echo "2. Review the draft release"
          echo "3. Publish when ready"
