name: Release Browser

on:
  workflow_dispatch:

jobs:
  get_asset:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ----- SOURCE: read from voqal/browser-dev using your PAT -----
      - name: List Releases from voqal/browser-dev
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: gh release list --repo voqal/browser-dev

      - name: Fetch Latest Release Tag from voqal/browser-dev
        id: latest
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          LATEST_RELEASE=$(gh release list --repo voqal/browser-dev --limit 1 --json tagName --jq '.[0].tagName')
          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
            echo "No releases found in voqal/browser-dev"
            exit 1
          fi
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> "$GITHUB_ENV"
          echo "latest=$LATEST_RELEASE" >> "$GITHUB_OUTPUT"

      - name: Download Latest Release Assets
        env:
          GH_TOKEN: ${{ secrets.PRIVATE_REPO_TOKEN }}
        run: |
          gh release download --repo voqal/browser-dev "${{ env.LATEST_RELEASE }}" --dir .
          echo "Downloaded files:"
          ls -al || true

      # ----- DESTINATION: create draft release in THIS repo -----
      - name: Create Draft Release in THIS repo (upload whatever exists)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}   # built-in token for this repo
          TAG: ${{ env.LATEST_RELEASE }}
        run: |
          # Collect any available assets (don’t fail if some types don’t exist)
          assets=$(ls *.dmg *.msi *.deb 2>/dev/null || true)

          if [ -z "$assets" ]; then
            echo "No assets found (*.dmg|*.msi|*.deb) to upload."
            exit 1
          fi

          echo "Assets to upload:"
          echo "$assets"

          # If release/tag already exists here, remove it to avoid collision
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release tag '$TAG' already exists. Deleting existing draft…"
            gh release delete "$TAG" --yes || true
            git tag -d "$TAG" || true
          fi

          gh release create "$TAG" $assets \
            -t "$TAG" \
            --draft \
            --generate-notes
